{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isCollection from '@stdlib/assert-is-collection';\nimport base from '@stdlib/array-base-mskreject';\nimport countFalsy from '@stdlib/array-base-count-falsy';\nimport zeros from '@stdlib/array-zeros';\nimport dtype from '@stdlib/array-dtype';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns a new array by applying a mask to a provided input array.\n*\n* @param {Collection} x - input array\n* @param {Collection} mask - mask array\n* @throws {TypeError} first argument must be a collection\n* @throws {TypeError} second argument must be a collection\n* @throws {Error} must provide collections of equal length\n* @returns {Collection} output array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n* var mask = [ 0, 1, 0, 1 ];\n*\n* var y = mskreject( x, mask );\n* // returns [ 1, 3 ]\n*\n* @example\n* import Int32Array from '@stdlib/array-int32';\n*\n* var x = new Int32Array( [ 1, 2, 3, 4 ] );\n* var mask = [ 0, 1, 0, 1 ];\n*\n* var y = mskreject( x, mask );\n* // returns <Int32Array>[ 1, 3 ]\n*/\nfunction mskreject( x, mask ) {\n\tvar dt;\n\tif ( !isCollection( x ) ) {\n\t\tthrow new TypeError( format( 'null2O', x ) );\n\t}\n\tif ( !isCollection( mask ) ) {\n\t\tthrow new TypeError( format( 'null2y', mask ) );\n\t}\n\tif ( x.length !== mask.length ) {\n\t\tthrow new Error( format( 'invalid arguments. Must provide equal length array-like objects.' ) );\n\t}\n\tdt = dtype( x );\n\tif ( dt === 'generic' || dt === null ) {\n\t\treturn base( x, mask );\n\t}\n\treturn base.assign( x, mask, zeros( countFalsy( mask ), dt ), 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default mskreject;\n"],"names":["mskreject","x","mask","dt","isCollection","TypeError","format","length","Error","dtype","base","assign","zeros","countFalsy"],"mappings":";;4iBA0DA,SAASA,EAAWC,EAAGC,GACtB,IAAIC,EACJ,IAAMC,EAAcH,GACnB,MAAM,IAAII,UAAWC,EAAQ,SAAUL,IAExC,IAAMG,EAAcF,GACnB,MAAM,IAAIG,UAAWC,EAAQ,SAAUJ,IAExC,GAAKD,EAAEM,SAAWL,EAAKK,OACtB,MAAM,IAAIC,MAAOF,EAAQ,qEAG1B,MAAY,aADZH,EAAKM,EAAOR,KACoB,OAAPE,EACjBO,EAAMT,EAAGC,GAEVQ,EAAKC,OAAQV,EAAGC,EAAMU,EAAOC,EAAYX,GAAQC,GAAM,EAAG,EAClE"}